{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useMemo } from 'react';\nimport { GraphQLClient } from 'graphql-hooks';\nimport memCache from 'graphql-hooks-memcache';\nvar graphQLClient;\n\nfunction createClient(initialState) {\n  return new GraphQLClient({\n    ssrMode: false,\n    url: 'http://localhost:4000/api/graphql',\n    // Server URL (must be absolute)\n    cache: memCache({\n      initialState: initialState\n    })\n  });\n}\n\nexport function initializeGraphQL() {\n  var _graphQLClient2;\n\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n  var _graphQLClient = (_graphQLClient2 = graphQLClient) !== null && _graphQLClient2 !== void 0 ? _graphQLClient2 : createClient(initialState); // After navigating to a page with an initial GraphQL state, create a new cache with the\n  // current state merged with the incoming state and set it to the GraphQL client.\n  // This is necessary because the initial state of `memCache` can only be set once\n\n\n  if (initialState && graphQLClient) {\n    graphQLClient.cache = memCache({\n      initialState: Object.assign(graphQLClient.cache.getInitialState(), initialState)\n    });\n  } // For SSG and SSR always create a new GraphQL Client\n\n\n  if (false) return _graphQLClient; // Create the GraphQL Client once in the client\n\n  if (!graphQLClient) graphQLClient = _graphQLClient;\n  return _graphQLClient;\n}\nexport function useGraphQLClient(initialState) {\n  _s();\n\n  var store = useMemo(function () {\n    return initializeGraphQL(initialState);\n  }, [initialState]);\n  return store;\n}\n\n_s(useGraphQLClient, \"K8ucUnUnAgJZGJWAL9Ze8IHCmoQ=\");","map":{"version":3,"sources":["/Users/wescopeland/Documents/github/scoretrackr-original/src/lib/graphql-client.ts"],"names":["useMemo","GraphQLClient","memCache","graphQLClient","createClient","initialState","ssrMode","url","cache","initializeGraphQL","_graphQLClient","Object","assign","getInitialState","useGraphQLClient","store"],"mappings":";;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,aAAT,QAA8B,eAA9B;AACA,OAAOC,QAAP,MAAqB,wBAArB;AAEA,IAAIC,aAAJ;;AAEA,SAASC,YAAT,CAAsBC,YAAtB,EAAoC;AAClC,SAAO,IAAIJ,aAAJ,CAAkB;AACvBK,IAAAA,OAAO,OADgB;AAEvBC,IAAAA,GAAG,EAAE,mCAFkB;AAEmB;AAC1CC,IAAAA,KAAK,EAAEN,QAAQ,CAAC;AAAEG,MAAAA,YAAY,EAAZA;AAAF,KAAD;AAHQ,GAAlB,CAAP;AAKD;;AAED,OAAO,SAASI,iBAAT,GAAgD;AAAA;;AAAA,MAArBJ,YAAqB,uEAAN,IAAM;;AACrD,MAAMK,cAAc,sBAAGP,aAAH,6DAAoBC,YAAY,CAACC,YAAD,CAApD,CADqD,CAGrD;AACA;AACA;;;AACA,MAAIA,YAAY,IAAIF,aAApB,EAAmC;AACjCA,IAAAA,aAAa,CAACK,KAAd,GAAsBN,QAAQ,CAAC;AAC7BG,MAAAA,YAAY,EAAEM,MAAM,CAACC,MAAP,CACZT,aAAa,CAACK,KAAd,CAAoBK,eAApB,EADY,EAEZR,YAFY;AADe,KAAD,CAA9B;AAMD,GAboD,CAcrD;;;AACA,aAAmC,OAAOK,cAAP,CAfkB,CAgBrD;;AACA,MAAI,CAACP,aAAL,EAAoBA,aAAa,GAAGO,cAAhB;AAEpB,SAAOA,cAAP;AACD;AAED,OAAO,SAASI,gBAAT,CAA0BT,YAA1B,EAAwC;AAAA;;AAC7C,MAAMU,KAAK,GAAGf,OAAO,CAAC;AAAA,WAAMS,iBAAiB,CAACJ,YAAD,CAAvB;AAAA,GAAD,EAAwC,CAACA,YAAD,CAAxC,CAArB;AACA,SAAOU,KAAP;AACD;;GAHeD,gB","sourcesContent":["import { useMemo } from 'react';\nimport { GraphQLClient } from 'graphql-hooks';\nimport memCache from 'graphql-hooks-memcache';\n\nlet graphQLClient;\n\nfunction createClient(initialState) {\n  return new GraphQLClient({\n    ssrMode: typeof window === 'undefined',\n    url: 'http://localhost:4000/api/graphql', // Server URL (must be absolute)\n    cache: memCache({ initialState })\n  });\n}\n\nexport function initializeGraphQL(initialState = null) {\n  const _graphQLClient = graphQLClient ?? createClient(initialState);\n\n  // After navigating to a page with an initial GraphQL state, create a new cache with the\n  // current state merged with the incoming state and set it to the GraphQL client.\n  // This is necessary because the initial state of `memCache` can only be set once\n  if (initialState && graphQLClient) {\n    graphQLClient.cache = memCache({\n      initialState: Object.assign(\n        graphQLClient.cache.getInitialState(),\n        initialState\n      )\n    });\n  }\n  // For SSG and SSR always create a new GraphQL Client\n  if (typeof window === 'undefined') return _graphQLClient;\n  // Create the GraphQL Client once in the client\n  if (!graphQLClient) graphQLClient = _graphQLClient;\n\n  return _graphQLClient;\n}\n\nexport function useGraphQLClient(initialState) {\n  const store = useMemo(() => initializeGraphQL(initialState), [initialState]);\n  return store;\n}\n"]},"metadata":{},"sourceType":"module"}