{"ast":null,"code":"import { makeStyles, styled, TableRow } from '@material-ui/core';\nimport { firstPlace, secondPlace, thirdPlace } from '~/models/colors';\n\nconst getPercentBetweenOneAndTen = (currentScore, firstPlaceScore, tenthPlaceScore) => {\n  const percentageOfFirst = Math.floor((currentScore - tenthPlaceScore) * 100 / (firstPlaceScore - tenthPlaceScore));\n\n  if (percentageOfFirst < 4) {\n    return 4;\n  }\n\n  return percentageOfFirst;\n}; // These are all lowercase because React propagates these to\n// inner standard HTML elements, which causes an error to be thrown.\n\n\nexport const StyledTableRow = styled(TableRow)({\n  background: props => {\n    const isLightMode = props.islightmode === 'true';\n    let bgColor = isLightMode ? `${props.bgcolor}1a` : `${props.bgcolor}aa`;\n\n    if (props.position === 1) {\n      bgColor = isLightMode ? `${firstPlace}1a` : `${firstPlace}77`;\n    } else if (props.position === 2) {\n      bgColor = `${secondPlace}44`;\n    } else if (props.position === 3) {\n      bgColor = isLightMode ? `${thirdPlace}1a` : `${thirdPlace}77`;\n    }\n\n    return `linear-gradient(to right, ${bgColor} ${getPercentBetweenOneAndTen(props.score, props.first, props.tenth)}%, ${props.surfacecolor} 0%)`;\n  }\n});\nexport const useStyles = makeStyles(theme => ({\n  firstPlaceCellBorder: {\n    paddingLeft: 12,\n    borderLeft: `10px solid ${firstPlace}`\n  },\n  secondPlaceCellBorder: {\n    paddingLeft: 12,\n    borderLeft: `10px solid ${secondPlace}`\n  },\n  thirdPlaceCellBorder: {\n    paddingLeft: 12,\n    borderLeft: `10px solid ${thirdPlace}`\n  }\n}));","map":{"version":3,"sources":["/Users/wescopeland/Documents/github/scoretrackr-original/src/components/game/Leaderboard/LeaderboardTable/LeaderboardTableRow/LeaderboardTableRow.styles.ts"],"names":["makeStyles","styled","TableRow","firstPlace","secondPlace","thirdPlace","getPercentBetweenOneAndTen","currentScore","firstPlaceScore","tenthPlaceScore","percentageOfFirst","Math","floor","StyledTableRow","background","props","isLightMode","islightmode","bgColor","bgcolor","position","score","first","tenth","surfacecolor","useStyles","theme","firstPlaceCellBorder","paddingLeft","borderLeft","secondPlaceCellBorder","thirdPlaceCellBorder"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,MAArB,EAA6BC,QAA7B,QAAoD,mBAApD;AAEA,SAASC,UAAT,EAAqBC,WAArB,EAAkCC,UAAlC,QAAoD,iBAApD;;AAEA,MAAMC,0BAA0B,GAAG,CACjCC,YADiC,EAEjCC,eAFiC,EAGjCC,eAHiC,KAI9B;AACH,QAAMC,iBAAiB,GAAGC,IAAI,CAACC,KAAL,CACvB,CAACL,YAAY,GAAGE,eAAhB,IAAmC,GAApC,IACGD,eAAe,GAAGC,eADrB,CADwB,CAA1B;;AAKA,MAAIC,iBAAiB,GAAG,CAAxB,EAA2B;AACzB,WAAO,CAAP;AACD;;AAED,SAAOA,iBAAP;AACD,CAfD,C,CAiBA;AACA;;;AAWA,OAAO,MAAMG,cAAc,GAAGZ,MAAM,CAACC,QAAD,CAAN,CAAiB;AAC7CY,EAAAA,UAAU,EAAGC,KAAD,IAAgC;AAC1C,UAAMC,WAAW,GAAGD,KAAK,CAACE,WAAN,KAAsB,MAA1C;AAEA,QAAIC,OAAO,GAAGF,WAAW,GAAI,GAAED,KAAK,CAACI,OAAQ,IAApB,GAA2B,GAAEJ,KAAK,CAACI,OAAQ,IAApE;;AAEA,QAAIJ,KAAK,CAACK,QAAN,KAAmB,CAAvB,EAA0B;AACxBF,MAAAA,OAAO,GAAGF,WAAW,GAAI,GAAEb,UAAW,IAAjB,GAAwB,GAAEA,UAAW,IAA1D;AACD,KAFD,MAEO,IAAIY,KAAK,CAACK,QAAN,KAAmB,CAAvB,EAA0B;AAC/BF,MAAAA,OAAO,GAAI,GAAEd,WAAY,IAAzB;AACD,KAFM,MAEA,IAAIW,KAAK,CAACK,QAAN,KAAmB,CAAvB,EAA0B;AAC/BF,MAAAA,OAAO,GAAGF,WAAW,GAAI,GAAEX,UAAW,IAAjB,GAAwB,GAAEA,UAAW,IAA1D;AACD;;AAED,WAAQ,6BAA4Ba,OAAQ,IAAGZ,0BAA0B,CACvES,KAAK,CAACM,KADiE,EAEvEN,KAAK,CAACO,KAFiE,EAGvEP,KAAK,CAACQ,KAHiE,CAIvE,MAAKR,KAAK,CAACS,YAAa,MAJ1B;AAKD;AAnB4C,CAAjB,CAAvB;AAsBP,OAAO,MAAMC,SAAS,GAAGzB,UAAU,CAAc0B,KAAD,KAAmB;AACjEC,EAAAA,oBAAoB,EAAE;AACpBC,IAAAA,WAAW,EAAE,EADO;AAEpBC,IAAAA,UAAU,EAAG,cAAa1B,UAAW;AAFjB,GAD2C;AAMjE2B,EAAAA,qBAAqB,EAAE;AACrBF,IAAAA,WAAW,EAAE,EADQ;AAErBC,IAAAA,UAAU,EAAG,cAAazB,WAAY;AAFjB,GAN0C;AAWjE2B,EAAAA,oBAAoB,EAAE;AACpBH,IAAAA,WAAW,EAAE,EADO;AAEpBC,IAAAA,UAAU,EAAG,cAAaxB,UAAW;AAFjB;AAX2C,CAAnB,CAAb,CAA5B","sourcesContent":["import { makeStyles, styled, TableRow, Theme } from '@material-ui/core';\n\nimport { firstPlace, secondPlace, thirdPlace } from '~/models/colors';\n\nconst getPercentBetweenOneAndTen = (\n  currentScore: number,\n  firstPlaceScore: number,\n  tenthPlaceScore: number\n) => {\n  const percentageOfFirst = Math.floor(\n    ((currentScore - tenthPlaceScore) * 100) /\n      (firstPlaceScore - tenthPlaceScore)\n  );\n\n  if (percentageOfFirst < 4) {\n    return 4;\n  }\n\n  return percentageOfFirst;\n};\n\n// These are all lowercase because React propagates these to\n// inner standard HTML elements, which causes an error to be thrown.\ninterface StyledTableRowProps {\n  bgcolor: string;\n  first: number;\n  tenth: number;\n  score: number;\n  position: number;\n  islightmode: string;\n  surfacecolor: string;\n}\n\nexport const StyledTableRow = styled(TableRow)({\n  background: (props: StyledTableRowProps) => {\n    const isLightMode = props.islightmode === 'true';\n\n    let bgColor = isLightMode ? `${props.bgcolor}1a` : `${props.bgcolor}aa`;\n\n    if (props.position === 1) {\n      bgColor = isLightMode ? `${firstPlace}1a` : `${firstPlace}77`;\n    } else if (props.position === 2) {\n      bgColor = `${secondPlace}44`;\n    } else if (props.position === 3) {\n      bgColor = isLightMode ? `${thirdPlace}1a` : `${thirdPlace}77`;\n    }\n\n    return `linear-gradient(to right, ${bgColor} ${getPercentBetweenOneAndTen(\n      props.score,\n      props.first,\n      props.tenth\n    )}%, ${props.surfacecolor} 0%)`;\n  }\n});\n\nexport const useStyles = makeStyles<Theme, any>((theme: Theme) => ({\n  firstPlaceCellBorder: {\n    paddingLeft: 12,\n    borderLeft: `10px solid ${firstPlace}`\n  },\n\n  secondPlaceCellBorder: {\n    paddingLeft: 12,\n    borderLeft: `10px solid ${secondPlace}`\n  },\n\n  thirdPlaceCellBorder: {\n    paddingLeft: 12,\n    borderLeft: `10px solid ${thirdPlace}`\n  }\n}));\n"]},"metadata":{},"sourceType":"module"}