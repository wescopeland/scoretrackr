{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Creates a performance-friendly state object prepopulated with loading and error values.\n *\n * @template T The shape of your state\n * @param {(Partial<StoreDefaults> & T)} initialState The initial values of T\n * @example\n *\n * ```\n * interface UserState {\n *     firstName: string | null;\n *     lastName: string | null;\n * }\n *\n * const initialState = createInitialState<UserState>({\n *     firstName: null;\n *     lastName: null\n * })\n * ```\n *\n * This returns an object as:\n *\n * ```\n * {\n *     firstName: null,\n *     lastName: null,\n *     isLoading: true,\n *     error: undefined\n * }\n * ```\n *\n * isLoading initializes to true by default.\n */\nexport function createInitialState(initialState) {\n  var _initialState$isLoadi;\n\n  const isLoading = (_initialState$isLoadi = initialState === null || initialState === void 0 ? void 0 : initialState.isLoading) !== null && _initialState$isLoadi !== void 0 ? _initialState$isLoadi : true;\n  return _objectSpread(_objectSpread({}, initialState), {}, {\n    isLoading\n  });\n}","map":{"version":3,"sources":["/Users/wescopeland/Documents/github/scoretrackr-original/src/utils/create-initial-state.ts"],"names":["createInitialState","initialState","isLoading"],"mappings":";;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,OAAO,SAASA,kBAAT,CACLC,YADK,EAEc;AAAA;;AACnB,QAAMC,SAAS,4BAAGD,YAAH,aAAGA,YAAH,uBAAGA,YAAY,CAAEC,SAAjB,yEAA8B,IAA7C;AAEA,yCACKD,YADL;AAEEC,IAAAA;AAFF;AAID","sourcesContent":["import { StoreDefaults } from '~/state/shared-models';\n\n/**\n * Creates a performance-friendly state object prepopulated with loading and error values.\n *\n * @template T The shape of your state\n * @param {(Partial<StoreDefaults> & T)} initialState The initial values of T\n * @example\n *\n * ```\n * interface UserState {\n *     firstName: string | null;\n *     lastName: string | null;\n * }\n *\n * const initialState = createInitialState<UserState>({\n *     firstName: null;\n *     lastName: null\n * })\n * ```\n *\n * This returns an object as:\n *\n * ```\n * {\n *     firstName: null,\n *     lastName: null,\n *     isLoading: true,\n *     error: undefined\n * }\n * ```\n *\n * isLoading initializes to true by default.\n */\nexport function createInitialState<T>(\n  initialState: Partial<StoreDefaults> & T\n): StoreDefaults & T {\n  const isLoading = initialState?.isLoading ?? true;\n\n  return {\n    ...initialState,\n    isLoading\n  };\n}\n"]},"metadata":{},"sourceType":"module"}