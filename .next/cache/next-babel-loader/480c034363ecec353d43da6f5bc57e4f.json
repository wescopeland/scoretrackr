{"ast":null,"code":"var _jsxFileName = \"/Users/wescopeland/Documents/github/scoretrackr-original/src/components/game/GameDrawerToggleButton/GameDrawerToggleButton.tsx\";\nvar __jsx = React.createElement;\nimport { IconButton, useMediaQuery, useTheme } from '@material-ui/core';\nimport { Menu } from 'mdi-material-ui';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\nimport { activeGameActions } from '~/state/active-game';\nimport { useStyles } from './GameDrawerToggleButton.styles';\nexport const GameDrawerToggleButton = ({\n  onDesktopClick,\n  onMobileClick,\n  isMobileSidenavOpen\n}) => {\n  const {\n    t\n  } = useTranslation('game');\n  const theme = useTheme();\n  const isUsingMobileSidenav = useMediaQuery(theme.breakpoints.down('sm'));\n  const dispatch = useDispatch();\n  const {\n    button,\n    icon\n  } = useStyles(); // If we go from a mobile breakpoint to a desktop breakpoint and\n  // the mobile sidenav is open, we should force it closed.\n  // This is because the desktop sidenav should now be in view.\n\n  if (!isUsingMobileSidenav && isMobileSidenavOpen) {\n    dispatch(activeGameActions.toggleIsMobileSidenavOpen());\n  }\n\n  const handleOnClick = () => {\n    isUsingMobileSidenav ? onMobileClick() : onDesktopClick();\n  };\n\n  return __jsx(IconButton, {\n    \"aria-label\": t('contentNavBar.toggleButtonAriaLabel'),\n    size: \"small\",\n    className: button,\n    onClick: handleOnClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, __jsx(Menu, {\n    className: icon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/wescopeland/Documents/github/scoretrackr-original/src/components/game/GameDrawerToggleButton/GameDrawerToggleButton.tsx"],"names":["IconButton","useMediaQuery","useTheme","Menu","React","useTranslation","useDispatch","activeGameActions","useStyles","GameDrawerToggleButton","onDesktopClick","onMobileClick","isMobileSidenavOpen","t","theme","isUsingMobileSidenav","breakpoints","down","dispatch","button","icon","toggleIsMobileSidenavOpen","handleOnClick"],"mappings":";;AAAA,SAASA,UAAT,EAAqBC,aAArB,EAAoCC,QAApC,QAAoD,mBAApD;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,iBAAT,QAAkC,qBAAlC;AACA,SAASC,SAAT,QAA0B,iCAA1B;AAQA,OAAO,MAAMC,sBAAsB,GAAG,CAAC;AACrCC,EAAAA,cADqC;AAErCC,EAAAA,aAFqC;AAGrCC,EAAAA;AAHqC,CAAD,KAIH;AACjC,QAAM;AAAEC,IAAAA;AAAF,MAAQR,cAAc,CAAC,MAAD,CAA5B;AACA,QAAMS,KAAK,GAAGZ,QAAQ,EAAtB;AACA,QAAMa,oBAAoB,GAAGd,aAAa,CAACa,KAAK,CAACE,WAAN,CAAkBC,IAAlB,CAAuB,IAAvB,CAAD,CAA1C;AACA,QAAMC,QAAQ,GAAGZ,WAAW,EAA5B;AACA,QAAM;AAAEa,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAmBZ,SAAS,EAAlC,CALiC,CAOjC;AACA;AACA;;AACA,MAAI,CAACO,oBAAD,IAAyBH,mBAA7B,EAAkD;AAChDM,IAAAA,QAAQ,CAACX,iBAAiB,CAACc,yBAAlB,EAAD,CAAR;AACD;;AAED,QAAMC,aAAa,GAAG,MAAM;AAC1BP,IAAAA,oBAAoB,GAAGJ,aAAa,EAAhB,GAAqBD,cAAc,EAAvD;AACD,GAFD;;AAIA,SACE,MAAC,UAAD;AACE,kBAAYG,CAAC,CAAC,qCAAD,CADf;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,SAAS,EAAEM,MAHb;AAIE,IAAA,OAAO,EAAEG,aAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAME,MAAC,IAAD;AAAM,IAAA,SAAS,EAAEF,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CADF;AAUD,CAhCM","sourcesContent":["import { IconButton, useMediaQuery, useTheme } from '@material-ui/core';\nimport { Menu } from 'mdi-material-ui';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useDispatch } from 'react-redux';\n\nimport { activeGameActions } from '~/state/active-game';\nimport { useStyles } from './GameDrawerToggleButton.styles';\n\ninterface GameDrawerToggleButtonProps {\n  onDesktopClick: () => void;\n  onMobileClick: () => void;\n  isMobileSidenavOpen: boolean;\n}\n\nexport const GameDrawerToggleButton = ({\n  onDesktopClick,\n  onMobileClick,\n  isMobileSidenavOpen\n}: GameDrawerToggleButtonProps) => {\n  const { t } = useTranslation('game');\n  const theme = useTheme();\n  const isUsingMobileSidenav = useMediaQuery(theme.breakpoints.down('sm'));\n  const dispatch = useDispatch();\n  const { button, icon } = useStyles();\n\n  // If we go from a mobile breakpoint to a desktop breakpoint and\n  // the mobile sidenav is open, we should force it closed.\n  // This is because the desktop sidenav should now be in view.\n  if (!isUsingMobileSidenav && isMobileSidenavOpen) {\n    dispatch(activeGameActions.toggleIsMobileSidenavOpen());\n  }\n\n  const handleOnClick = () => {\n    isUsingMobileSidenav ? onMobileClick() : onDesktopClick();\n  };\n\n  return (\n    <IconButton\n      aria-label={t('contentNavBar.toggleButtonAriaLabel')}\n      size=\"small\"\n      className={button}\n      onClick={handleOnClick}\n    >\n      <Menu className={icon} />\n    </IconButton>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}